<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<div class="containersazzad">
  <h1>{{ section.settings.sec_head }}</h1>


     {%- for block in section.blocks -%}
      
          <button class="accordion">{{ block.settings.title }}</button>
          <div class="accordion-content">
            <p>
              {{ block.settings.content }}
            </p>
          </div>
       
       {% endfor %}

 
 
</div>


<style>

.containersazzad {
  width: 55%;
  margin: 50px auto;
}

  
button.accordion {
  border-radius: 1rem;
    width: 100%;
    background-color: #F5F5F4;
    border: none;
    outline: none;
    text-align: left;
    padding: 23px 20px;
    font-size: 22px;
    font-weight: 700;
    color: #000;
    margin-top: 30px;
    cursor: pointer;
    transition: background-color 0.2s linear;
}

button.accordion:after {
    font-family: FontAwesome;
    content: "\f067";
    font-family: "fontawesome";
    font-size: 22px;
    float: right;
    padding: 0 10px;
}
button.accordion.is-open:after {
  content: "\f068";
}

 button.accordion.is-open {
    background-color: #F5F5F4;
    border-radius: 1rem 1rem 0px 0px;
}
.accordion-content {
   border-radius: 0rem 0rem 1rem 1rem;
  background-color: #F5F5F4;
  border-left: 1px solid  #F5F5F4;
  border-right: 1px solid  #F5F5F4;
  padding: 0 20px;
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.2s ease-in-out;
}



@media (max-width: 768px) {
  
 .containersazzad {
  width: 97%;
  margin: 50px auto;
}

  
}
  
</style>

<script>

const accordionBtns = document.querySelectorAll(".accordion");

accordionBtns.forEach((accordion) => {
  accordion.onclick = function () {
    this.classList.toggle("is-open");

    let content = this.nextElementSibling;
    console.log(content);

    if (content.style.maxHeight) {
      //this is if the accordion is open
      content.style.maxHeight = null;
    } else {
      //if the accordion is currently closed
      content.style.maxHeight = content.scrollHeight + "px";
      console.log(content.style.maxHeight);
    }
  };
});

</script>


{% schema %}
  {
    "name": "FAQ Section",
    "settings": [
    {
      "type": "text",
      "id": "sec_head",
      "label": "Heading"
    }
     
  ],

  "blocks": [
     {
       "name": "Slide",
       "type": "slide",
       "settings": [
         {
           "type": "text",
           "id": "title",
           "label": "Title"
         },
         {
           "type": "richtext",
           "id": "content",
           "label": "content"
         }
         
       ]
     }
  ],
  "presets": [
    {
      "name": "FAQ Section"
      
    }
  ]

    
  }
{% endschema %}

{% stylesheet %}
{% endstylesheet %}

{% javascript %}
{% endjavascript %}







<div class="faq-page">
  <div class="faq-page-width">

    <div class="faq-page-header">
      <h1>{{ page.title }}</h1>

      <div class="faq-page-header-content">
        {{ page.content }}
      </div>
    </div>

    <div class="faq-page-body">
      {% for block in section.blocks %}
        {% if block.type == 'category' %}
          <h2 class="faq-page-category">{{ block.settings.title }}</h2>
        {% else %}
          <div class="faq-page-question">
            <header class="faq-page-question-header">
              <h3>{{ block.settings.title }}</h3>
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960" width="48"><path d="M480-345 240-585l43-43 197 198 197-197 43 43-240 239Z"/></svg>
            </header>
            <div class="faq-page-question-body">
              <div class="faq-page-question-body-inner">
                {{ block.settings.body }}
              </div>
            </div>
          </div>
        {% endif %}
      {% endfor %}
    </div>

  </div>
</div>



{% schema %}
{
  "name": "FAQ",
  "settings": [],
  "blocks": [
    {
      "type": "category",
      "name": "Category",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Category title"
        }
      ]
    },
    {
      "type": "question",
      "name": "Question",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Question title"
        },
        {
          "type": "richtext",
          "id": "body",
          "label": "Question body"
        }
      ]
    }
  ]
}
{% endschema %}



const questionHeaders = document.querySelectorAll(".faq-page-question-header");

questionHeaders.forEach((header) => {
  header.addEventListener("click", () => {
    header.parentElement.classList.toggle("active");
  });
});




/*
  FAQ page
*/

.faq-page {
  padding: 60px 0;
}

.faq-page-width {
  max-width: 500px;
  margin: 0 auto;
  width: calc(100% - 40px);
}

.faq-page-header {
  padding-bottom: 30px;
}

.faq-page-header h1 {
  font-size: 44px;
  margin-bottom: 10px;
}

.faq-page-header-content {
  font-size: 21px;
}

.faq-page-category {
  text-transform: uppercase;
  opacity: 0.4;
  font-size: 14px;
  margin-bottom: 10px;
}

.faq-page-question + .faq-page-category {
  margin-top: 30px;
}

.faq-page-question {
  border-bottom: 1px solid #ddd;
}

.faq-page-question-header {
  padding: 20px 0;
  display: flex;
  align-items: center;
  cursor: pointer;
  justify-content: space-between;
}

.faq-page-question-header h3 {
  font-size: 18px;
  flex: 1;
}

.faq-page-question-header svg {
  width: 36px;
  transition: 0.2s transform;
}

.faq-page-question.active .faq-page-question-header svg {
  transform: rotate(180deg);
}

.faq-page-question-body {
  max-height: 0;
  overflow: hidden;
  transition: 1s max-height;
}

.faq-page-question.active .faq-page-question-body {
  max-height: 400px;
}

.faq-page-question-body-inner > * + * {
  margin-top: 20px;
}

.faq-page-question-body-inner {
  padding-bottom: 20px;
}










